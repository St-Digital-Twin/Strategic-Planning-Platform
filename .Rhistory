legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16),
axis.title.y      = element_text (size  = 16),
axis.text         = element_text (size  = 12,
color = "white"),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
)
) %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(legend = list(
orientation = "h",y = -0.25,
bgcolor  = 'rgb(0, 46, 69)'))  %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
# Возврат
return(list(curve      = curve,
graph_cols = graph_cols))
}
modelGraph()
path <- "view_in_shiny_like_files"
settings_grah <- read_delim("Rmddata.csv") %>% select(-1)
settings_grah
View(settings_grah)
quotesForecast <- quotesForecast(read.xlsx(paste0(path,"/",settings_grah$file)) %>% as.data.table())
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/2.EuroChemFunc.R')
library(this.path)
this.path()
this.path() %>% str_replace('1.Data/testrmd.Rmd', '5.R/2.EuroChemFunc.R')
source(str_replace(this.path(), '1.Data/testrmd.Rmd', '5.R/2.EuroChemFunc.R'), encoding = 'UTF-8')
# 2. Прогнозирование биржевых котировок (сценарных условий) ####
quotesForecast <- function(data                = tar_read(download_files),
GDP_before_end_year = -2, # Использую для зактрытия данных за 2020 год
GDP_forecast        = 2,
xyinya = NULL
){
# Прогнозные константы для котировок
pred_data_const <- data.table(year = 2021:2035,
oil  = 45,
euro = c(1.20, 1.22, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24),
coal = c(63.69, 69.6080065625, 74.27375, 75.6, 75.6, 75.6, 75.6, 75.6, 75.6, 75.6, 75.6, 75.6, 75.6, 75.6, 75.6),
gas  = c(3.66448886194379, 4.88572420088728, 5.05664274751648, 5.29190037015231, 4.22940806641501, 4.32245504387614, 4.41754905484142, 4.51473513404793, 4.61405930699698, 4.71556861175092, 4.81931112120944, 4.92533596587605, 5.03369335712532, 5.14443461098208, 5.25761217242368)) %>%
.[year >= 2025, oil := oil * cumprod(rep(1.022, length(oil)))]
# Достраивание данных с октября 2020 до 2021. и изменение GDP. При скачивании котировок, этот костыль можно будет убрать
data <- data[.(2020, 9), gdp := -3, on = c('year', 'month')]
if(last(data$month) < 12){
data1 <- data.table(year = last(data$year),
month = (last(data$month) + 1):12,
oil = last(data$oil),
euro = last(data$euro),
coal = last(data$coal),
gdp = GDP_before_end_year,
gas = last(data$gas),
methanol = NA)
} else {
data1 <- data[, lapply(.SD, function(x) x = NA)] %>% na.omit()
}
# Прогнозы
data_forc <- data.table(year = rep((last(data$year) + 1):2035, each = 12),
month = rep(1:12, length((last(data$year) + 1):2035)),
gdp = 0,
methanol = NA)
if(last(data$year) == 2020){
data_forc <- data_forc %>%
.[(year == 2021) & (month >= 10), gdp := GDP_forecast] %>%
.[year > 2021, gdp := GDP_forecast]
} else {
data_forc <- data_forc[year > last(data$year), gdp := GDP_forecast]
}
data_forc <- merge(data_forc, pred_data_const, by = 'year', all.x = TRUE)
# Объединение
data_new <- rbindlist(list(data, data1, data_forc), use.names=TRUE)[, gdp_less_1 := ifelse(gdp < 1, gdp, 0)]
return(data_new)
}
quotesForecast <- quotesForecast(read.xlsx(paste0(path,"/",settings_grah$file)) %>% as.data.table())
quotesForecast
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
modelCreation <- modelCreation(quotesForecast)$model_data
quotesForecast <- quotesForecast(read.xlsx(paste0(path,"/",settings_grah$file)) %>% as.data.table())
modelCreation <- modelCreation(quotesForecast)$model_data
write.xlsx(modelCreation, "tempdata2.xlsx")
p <- graphCor(data = "tempdata2.xlsx", targets = FALSE,
x_gr = settings_grah$x_gr,
y_gr = settings_grah$y_gr,
str_year = settings_grah$str_year,
end_year = settings_grah$end_year) %>%
layout(
images = list(
source = base64enc::dataURI(file = '15.png'),
x = 0.82, y = 1.05 ,
sizex = 0.18, sizey = 0.1,
xref = "paper", yref = "paper",
xanchor = "left", yanchor = "bottom"
),
margin = list(t = 50)
)
p <- graphCor(data = "tempdata2.xlsx", targets = FALSE,
x_gr = settings_grah$x_gr,
y_gr = settings_grah$y_gr,
str_year = settings_grah$str_year,
end_year = settings_grah$end_year) %>%
layout(
images = list(
source = base64enc::dataURI(file = '6.pic/15.png'),
x = 0.82, y = 1.05 ,
sizex = 0.18, sizey = 0.1,
xref = "paper", yref = "paper",
xanchor = "left", yanchor = "bottom"
),
margin = list(t = 50)
)
p <- graphCor(data = "tempdata2.xlsx", targets = FALSE,
x_gr = settings_grah$x_gr,
y_gr = settings_grah$y_gr,
str_year = settings_grah$str_year,
end_year = settings_grah$end_year) %>%
layout(
images = list(
source = base64enc::dataURI(file = '6.Pic/15.png'),
x = 0.82, y = 1.05 ,
sizex = 0.18, sizey = 0.1,
xref = "paper", yref = "paper",
xanchor = "left", yanchor = "bottom"
),
margin = list(t = 50)
)
p
graphCor(data = "tempdata2.xlsx", targets = FALSE,
x_gr = settings_grah$x_gr,
y_gr = settings_grah$y_gr,
str_year = settings_grah$str_year,
end_year = settings_grah$end_year) %>%
layout(
images = list(
source = base64enc::dataURI(file = '6.Pic/15.png'),
x = 0.82, y = 1.05 ,
sizex = 0.18, sizey = 0.1,
xref = "paper", yref = "paper",
xanchor = "left", yanchor = "bottom"
),
margin = list(t = 50)
)
graphCor(data = "tempdata2.xlsx", targets = FALSE,
x_gr = settings_grah$x_gr,
y_gr = settings_grah$y_gr,
str_year = settings_grah$str_year,
end_year = settings_grah$end_year)
p <- graphCor(data = "tempdata2.xlsx", targets = FALSE,
x_gr = settings_grah$x_gr,
y_gr = settings_grah$y_gr,
str_year = settings_grah$str_year,
end_year = settings_grah$end_year)
p
base64enc::dataURI(file = '6.Pic/15.png')
dataURI(file = '6.Pic/15.png')
base64enc::dataURI(file = '6.Pic/15.png')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
# 1. Место хранения файлов            ####
path <- "1.Data/view_in_shiny_like_files"
vec_of_files <- list.files(path = path)
data <- tar_read(model_data)$model_data
list_axis_cor <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "model", "err"))] # Определение названий осей по колонкам
# 2. Преобразование данных            ####
# Преобразование
alko_vec <- 'Algorithm 1'
visual_layout_processing <- list(
selectizeInput('alko', label = 'Algorythm', choices = alko_vec, options = list(create = TRUE), selected = "algorithm 1"),
sliderInput('market_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = ''),
actionButton("update_data", "Update data", style = "color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# Графики
# box 1
list_box1_processing <- c("methanol", 'model')
visual_layout_graphic1_processing <- list(
selectizeInput('proc_list1', label = 'Curve data', choices = list_box1_processing, options = list(create = TRUE), selected = list_box1_processing, multiple = TRUE),
plotlyOutput('proc_graph1') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# box 2
list_box2_processing <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "err"))] # Определение названий осей по колонкам
visual_layout_graphic2_processing <- list(
selectizeInput('proc_list2', label = 'Curve data', choices = list_box2_processing, options = list(create = TRUE), selected = c('gas', 'gdp'), multiple = TRUE),
plotlyOutput('proc_graph2') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# 3. Раздел меню с общими настройками ####
visual_layout_loading <- list(
fileInput("user_file", "Send File", accept = ".csv"),
selectizeInput("from_where", label = "Choose input", choices = c("File","Downloaded"),options = list(create = TRUE), selected = "File"),
uiOutput("id2")
# actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
# actionButton("update_data", "Update data", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 4. Раздел меню с графиками          ####
# Попарные корреляции
visual_layout_corr <- list(
menuItem("First correlation graphic",selectizeInput("Y_1", label = "Choose Y axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_1", label = "Choose X axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('first_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')),
menuItem("Second correlation graphic", selectizeInput("Y_2", label = "Choose Y axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_2", label = "Choose X axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('second_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
)
# Кривая и гистограмма
visual_layout_model <- list(
sliderInput('model_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
# Общий
visual_layout_graphic <- list(
menuItem('Correlation graphic', visual_layout_corr),
menuItem('Model graphic', visual_layout_model),
textInput("email_pol", "Write email for reporting", "n.burakov@dtwin.ru"),
actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 5. Загрузка                         ####
source('3.Shiny/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/server.R',         encoding = 'UTF-8')
source('3.Shiny/ui.R',             encoding = 'UTF-8')
base64enc::dataURI(file = '6.Pic/15.png')
base64enc::dataURI(file = '6.Pic/15.png')
base64enc::dataURI(file = '6.Pic/15.png')
base64enc::dataURI(file = '6.Pic\15.png')
library(bookdown)
library(targets)
library(tidyverse)
library(htmlTable)
library(knitr)
# library(this.path)
# source(str_replace(this.path(), '1.Data/testrmd.Rmd', '5.R/2.EuroChemFunc.R'), encoding = 'UTF-8')
# График корреляций
graphCor <- function(data     = tar_read(model_data)$model_data, # если xlsx, то "1.Data/model_data.xlsx"
y_gr     = 'euro',
x_gr     = 'oil',
str_year = 2012,
end_year = 2020,
targets  = TRUE # Данные берутся из таргется
){
if(!targets){
data <- read.xlsx(xlsxFile = data) %>% as.data.table()
# setnames(old = names(.), new = c('year', 'month', 'oil', 'euro', 'coal', 'gdp', 'gas', 'methanol'))
}
data <- data[year %between% c(str_year, end_year), ]
t <- list(family = "Panton", size = 14, color = 'white')
ggplotly(ggplot(data, aes(x = .data[[x_gr]], y = .data[[y_gr]])) +
geom_point(color = '#FDC600') +
geom_smooth(method = 'lm', linetype = 3, color = '#FFFFFF', se = FALSE, formula = 'y ~ x') +
theme (
#text = element_text(family = "Panton"),
panel.grid.major.x = element_line(colour = "white", linetype = "dotted"),
panel.grid.major.y = element_line(colour = "white", linetype = "dotted"),
legend.position = "bottom",
legend.box.just = "bottom",
legend.direction = "horizontal",
#legend.text.align = 0.001,
text              = element_text (family = "Panton",
color  = "white"   ),
rect              = element_rect (fill   = "black"    ),
line              = element_line (color  = "black"    ),
title             = element_text (size   = 15,
face   = "bold"   ),
legend.title      = element_text (size  = 12,
color = "white",
face  = "bold"    ),
legend.key        = element_rect (fill  = "black"     ),
legend.background = element_rect (fill  = "black"     ),
legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"    ),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16        ),
axis.title.y      = element_text (size  = 16        ),
axis.text         = element_text (size  = 12,
color = "white"    ),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
) +
labs(title    = paste0('R2 = ', round(cor(data[[x_gr]], data[[y_gr]])^2, 4), '\n Correlation = ', round(cor(data[[x_gr]], data[[y_gr]]), 4)))
) %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(legend = list(
orientation = "h",y = -0.25))  %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
}
# Графики модели
modelGraph <- function(data = tar_read(model_data)$model_data, # '1.Data/model_data.xlsx'
str_year = 2012,
end_year = 2025,
targets  = TRUE # Данные берутся из таргется
){
if(!targets){
data <- read.xlsx(xlsxFile = data) %>% as.data.table()
}
# Подготовка данных для кривых
data_month <- copy(data) %>%
.[, rowid := 1:nrow(.)] %>%
.[year %between% c(str_year, end_year), ]
#na.omit(., cols = 'methanol')
# Кривая
curve <- ggplotly(ggplot(data_month, aes(x = rowid)) +
geom_line(aes(y = methanol, color = 'methanol')) +
geom_line(aes(y = model, color = 'model')) +
scale_x_continuous(name = 'year', breaks = seq(first(data_month$rowid), last(data_month$rowid), by = 12), label = seq(first(data_month$year), last(data_month$year), by = 1)) +
theme (
#text = element_text(family = "Panton"),
panel.grid.major.x = element_line(colour = "white", linetype = "dotted"),
panel.grid.major.y = element_line(colour = "white", linetype = "dotted"),
#legend.text.align = 0.001,
text              = element_text (family = "Panton",
color  = "white"),
rect              = element_rect (fill   = "black"),
line              = element_line (color  = "black"),
title             = element_text (size   = 15,
face   = "bold"),
legend.title      = element_text (size  = 12,
color = "white",
face  = "bold"),
legend.key        = element_rect (fill  = "black"),
legend.background = element_rect (fill  = "black"),
legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16),
axis.title.y      = element_text (size  = 16),
axis.text         = element_text (size  = 12,
color = "white"),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
) +
scale_color_manual (name = "type:",
values = c("methanol" = '#FDC600',"model" = '#6fb3a7')) +
ylab('price')
# labs(title    = paste0('R2 = ', round(cor(data[[x_gr]], data[[y_gr]])^2, 4), '\n Correlation = ', round(cor(data[[x_gr]], data[[y_gr]]), 4)))
) %>%
layout(legend = list(
orientation = "h",y = -0.25,
bgcolor  = 'rgb(0, 46, 69)'))  %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
# Подготовка данных для гистограммы
data_year <- copy(data)[, lapply(.SD, mean), .SDcols = c('model', 'methanol'), by = year] %>% # na.omit(data_year, cols =  'methanol') %>%
.[year %between% c(str_year, end_year), ] %>%
melt(id.vars = 'year', variable.name = "type", value.name = 'price')
# Гистограмма
graph_cols <- ggplotly(ggplot(data_year, aes(x = year, y = price, fill = type)) +
geom_col(position = 'dodge') +
scale_fill_manual(values = c("methanol" = '#FDC600',"model" = '#637672'))  +
scale_x_continuous(name = 'year', breaks = seq(first(data_year$year), last(data_year$year), by = 1)) +
theme (
#text = element_text(family = "Panton"),
panel.grid.major.x = element_line(colour = "white", linetype = "dotted"),
panel.grid.major.y = element_line(colour = "white", linetype = "dotted"),
#legend.text.align = 0.001,
text              = element_text (family = "Panton",
color  = "white"),
rect              = element_rect (fill   = "black"),
line              = element_line (color  = "black"),
title             = element_text (size   = 15,
face   = "bold"),
legend.title      = element_text (size  = 12,
color = "white",
face  = "bold"),
legend.key        = element_rect (fill  = "black"),
legend.background = element_rect (fill  = "black"),
legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16),
axis.title.y      = element_text (size  = 16),
axis.text         = element_text (size  = 12,
color = "white"),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
)
) %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(legend = list(
orientation = "h",y = -0.25,
bgcolor  = 'rgb(0, 46, 69)'))  %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
# Возврат
return(list(curve      = curve,
graph_cols = graph_cols))
}
path <- "view_in_shiny_like_files"
settings_grah <- read_delim("Rmddata.csv") %>% select(-1)
quotesForecast <- quotesForecast(read.xlsx(paste0(path,"/",settings_grah$file)) %>% as.data.table())
modelCreation <- modelCreation(quotesForecast)$model_data
write.xlsx(modelCreation, "tempdata2.xlsx")
p <- graphCor(data = "tempdata2.xlsx", targets = FALSE,
x_gr = settings_grah$x_gr,
y_gr = settings_grah$y_gr,
str_year = settings_grah$str_year,
end_year = settings_grah$end_year) %>%
layout(
images = list(
source = base64enc::dataURI(file = '6.Pic/15.png'),
x = 0.82, y = 1.05 ,
sizex = 0.18, sizey = 0.1,
xref = "paper", yref = "paper",
xanchor = "left", yanchor = "bottom"
),
margin = list(t = 50)
)
# 6. Shiny                            ####
shinyApp(ui, server)
# Исходный скрипт с запуском shiny-приложение (пользовательского DashBoards)
# Визуализация работы всего кода
# Разработчик ООО "Цифровой Двойник"
# Версия 29.07.2022
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
# 1. Место хранения файлов            ####
path <- "1.Data/view_in_shiny_like_files"
vec_of_files <- list.files(path = path)
data <- tar_read(model_data)$model_data
list_axis_cor <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "model", "err"))] # Определение названий осей по колонкам
# 2. Преобразование данных            ####
# Преобразование
alko_vec <- 'Algorithm 1'
visual_layout_processing <- list(
selectizeInput('alko', label = 'Algorythm', choices = alko_vec, options = list(create = TRUE), selected = "algorithm 1"),
sliderInput('market_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = ''),
actionButton("update_data", "Update data", style = "color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# Графики
# box 1
list_box1_processing <- c("methanol", 'model')
visual_layout_graphic1_processing <- list(
selectizeInput('proc_list1', label = 'Curve data', choices = list_box1_processing, options = list(create = TRUE), selected = list_box1_processing, multiple = TRUE),
plotlyOutput('proc_graph1') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# box 2
list_box2_processing <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "err"))] # Определение названий осей по колонкам
visual_layout_graphic2_processing <- list(
selectizeInput('proc_list2', label = 'Curve data', choices = list_box2_processing, options = list(create = TRUE), selected = c('gas', 'gdp'), multiple = TRUE),
plotlyOutput('proc_graph2') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# 3. Раздел меню с общими настройками ####
visual_layout_loading <- list(
fileInput("user_file", "Send File", accept = ".csv"),
selectizeInput("from_where", label = "Choose input", choices = c("File","Downloaded"),options = list(create = TRUE), selected = "File"),
uiOutput("id2")
# actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
# actionButton("update_data", "Update data", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 4. Раздел меню с графиками          ####
# Попарные корреляции
visual_layout_corr <- list(
menuItem("First correlation graphic",selectizeInput("Y_1", label = "Choose Y axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_1", label = "Choose X axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('first_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')),
menuItem("Second correlation graphic", selectizeInput("Y_2", label = "Choose Y axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_2", label = "Choose X axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('second_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
)
# Кривая и гистограмма
visual_layout_model <- list(
sliderInput('model_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
# Общий
visual_layout_graphic <- list(
menuItem('Correlation graphic', visual_layout_corr),
menuItem('Model graphic', visual_layout_model),
textInput("email_pol", "Write email for reporting", "n.burakov@dtwin.ru"),
actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 5. Загрузка                         ####
source('3.Shiny/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/server.R',         encoding = 'UTF-8')
source('3.Shiny/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
reqipient <- input$email_pol
knit2html("1.Data/testrmd.Rmd", options = "")
send.mail(from = "<nikbrown35@gmail.com>",
to = paste0("<",reqipient,">"),
subject = paste0("Report on file : ",input$nd_file),
body = "testrmd.html",
html = TRUE,
inline = TRUE,
smtp = list(host.name = "smtp.gmail.com",
port = 465,
user.name = "dtwin496@gmail.com",
passwd = "cfdocpmuldwewwhq",
ssl = TRUE),
authenticate = TRUE,
encoding = "utf-8")
