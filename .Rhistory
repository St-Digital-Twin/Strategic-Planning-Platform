legend.box.just = "bottom",
legend.direction = "horizontal",
#legend.text.align = 0.001,
text              = element_text (family = "Panton",
color  = "white"   ),
rect              = element_rect (fill   = "black"    ),
line              = element_line (color  = "black"    ),
title             = element_text (size   = 15,
face   = "bold"   ),
legend.title      = element_text (size  = 12,
color = "white",
face  = "bold"    ),
legend.key        = element_rect (fill  = "black"     ),
legend.background = element_rect (fill  = "black"     ),
legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"    ),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16        ),
axis.title.y      = element_text (size  = 16        ),
axis.text         = element_text (size  = 12,
color = "white"    ),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
)
# labs(title    = paste0('R2 = ', round(cor(data[[x_gr]], data[[y_gr]])^2, 4), '\n Correlation = ', round(cor(data[[x_gr]], data[[y_gr]]), 4)))
) %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(legend = list(
orientation = "h",y = -0.25))  %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
ggplot(data_month, aes(x = rowid)) +
geom_line(aes(y = methanol), color = '#FDC600') +
geom_line(aes(y = model), color = '#6fb3a7') +
scale_x_continuous(name = 'year', seq(first(year), last(year), by = 1))
ggplot(data_month, aes(x = rowid)) +
geom_line(aes(y = methanol), color = '#FDC600') +
geom_line(aes(y = model), color = '#6fb3a7') +
scale_x_continuous(name = 'year', breaks = seq(first(year), last(year), by = 1))
ggplot(data_month, aes(x = rowid)) +
geom_line(aes(y = methanol), color = '#FDC600') +
geom_line(aes(y = model), color = '#6fb3a7') +
scale_x_continuous(name = 'year', breaks = seq(first(data_month$year), last(data_month$year), by = 1))
ggplotly(ggplot(data_month, aes(x = rowid)) +
geom_line(aes(y = methanol), color = '#FDC600') +
geom_line(aes(y = model), color = '#6fb3a7') +
scale_x_continuous(name = 'year', breaks = seq(first(data_month$year), last(data_month$year), by = 1))+
theme (
#text = element_text(family = "Panton"),
panel.grid.major.x = element_line(colour = "white", linetype = "dotted"),
panel.grid.major.y = element_line(colour = "white", linetype = "dotted"),
legend.position = "bottom",
legend.box.just = "bottom",
legend.direction = "horizontal",
#legend.text.align = 0.001,
text              = element_text (family = "Panton",
color  = "white"   ),
rect              = element_rect (fill   = "black"    ),
line              = element_line (color  = "black"    ),
title             = element_text (size   = 15,
face   = "bold"   ),
legend.title      = element_text (size  = 12,
color = "white",
face  = "bold"    ),
legend.key        = element_rect (fill  = "black"     ),
legend.background = element_rect (fill  = "black"     ),
legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"    ),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16        ),
axis.title.y      = element_text (size  = 16        ),
axis.text         = element_text (size  = 12,
color = "white"    ),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
)
# labs(title    = paste0('R2 = ', round(cor(data[[x_gr]], data[[y_gr]])^2, 4), '\n Correlation = ', round(cor(data[[x_gr]], data[[y_gr]]), 4)))
) %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(legend = list(
orientation = "h",y = -0.25))  %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
seq(first(data_month$year), last(data_month$year), by = 1)
ggplotly(ggplot(data_month, aes(x = rowid)) +
geom_line(aes(y = methanol), color = '#FDC600') +
geom_line(aes(y = model), color = '#6fb3a7') +
scale_x_continuous(name = 'year', breaks = seq(first(data_month$year), last(data_month$year), by = 12))+
theme (
#text = element_text(family = "Panton"),
panel.grid.major.x = element_line(colour = "white", linetype = "dotted"),
panel.grid.major.y = element_line(colour = "white", linetype = "dotted"),
legend.position = "bottom",
legend.box.just = "bottom",
legend.direction = "horizontal",
#legend.text.align = 0.001,
text              = element_text (family = "Panton",
color  = "white"   ),
rect              = element_rect (fill   = "black"    ),
line              = element_line (color  = "black"    ),
title             = element_text (size   = 15,
face   = "bold"   ),
legend.title      = element_text (size  = 12,
color = "white",
face  = "bold"    ),
legend.key        = element_rect (fill  = "black"     ),
legend.background = element_rect (fill  = "black"     ),
legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"    ),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16        ),
axis.title.y      = element_text (size  = 16        ),
axis.text         = element_text (size  = 12,
color = "white"    ),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
)
# labs(title    = paste0('R2 = ', round(cor(data[[x_gr]], data[[y_gr]])^2, 4), '\n Correlation = ', round(cor(data[[x_gr]], data[[y_gr]]), 4)))
) %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(legend = list(
orientation = "h",y = -0.25))  %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
seq(first(data_month$year), last(data_month$year), by = 12)
seq(first(data_month$year), last(data_month$year), each = 12)
rep(first(data_month$year), last(data_month$year), each = 12)
breaks = rep(first(data_month$year), last(data_month$year), by = 12)
rep(first(data_month$year), last(data_month$year), by = 12)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
# 1. Место хранения файлов ####
path <- "1.Data/view_in_shiny_like_files"
vec_of_files <- list.files(path = path)
# 2. Раздел меню с общими настройками ####
visual_layout_common <- list(
fileInput("user_file", "Send File", accept = ".csv"),
selectizeInput("from_where", label = "Choose input", choices = c("File","Downloaded"),options = list(create = TRUE), selected = "File"),
uiOutput("id2"),
textInput("email_pol", "White email for reporting", "n.burakov@dtwin.ru"),
actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
# actionButton("update_data", "Update data", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 3. Раздел меню с графиками для попарных корреляций ####
data <- tar_read(model_data)$model_data
list_axis_cor <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "model", "err"))] # Определение названий осей по колонкам
visual_layout_corr <- list(
menuItem("First correlation graphic",selectizeInput("Y_1", label = "Choose Y axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_1", label = "Choose X axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('first_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')),
menuItem("Second correlation graphic", selectizeInput("Y_2", label = "Choose Y axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_2", label = "Choose X axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('second_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
)
# 4. Раздел меню с графиками для модели и гистограммы ####
visual_layout_model <- list(
sliderInput('model_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
# 5. Загрузка ####
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
# 1. Место хранения файлов ####
path <- "1.Data/view_in_shiny_like_files"
vec_of_files <- list.files(path = path)
# 2. Раздел меню с общими настройками ####
visual_layout_common <- list(
fileInput("user_file", "Send File", accept = ".csv"),
selectizeInput("from_where", label = "Choose input", choices = c("File","Downloaded"),options = list(create = TRUE), selected = "File"),
uiOutput("id2"),
textInput("email_pol", "White email for reporting", "n.burakov@dtwin.ru"),
actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
# actionButton("update_data", "Update data", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 3. Раздел меню с графиками для попарных корреляций ####
data <- tar_read(model_data)$model_data
list_axis_cor <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "model", "err"))] # Определение названий осей по колонкам
visual_layout_corr <- list(
menuItem("First correlation graphic",selectizeInput("Y_1", label = "Choose Y axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_1", label = "Choose X axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('first_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')),
menuItem("Second correlation graphic", selectizeInput("Y_2", label = "Choose Y axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_2", label = "Choose X axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('second_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
)
# 4. Раздел меню с графиками для модели и гистограммы ####
visual_layout_model <- list(
sliderInput('model_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
# 5. Загрузка ####
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny ####
shinyApp(ui, server)
data <- read.xlsx("1.Data/2.shiny/coords.xlsx") %>% filter(id == id0) %>% select(label) %>% deframe()
id0 <-  4
data <- read.xlsx("1.Data/2.shiny/coords.xlsx") %>% filter(id == id0) %>% select(label) %>% deframe()
table0 <- tar_read_raw(data)
table0
rhandsontable(table0[[1]])
table0 <- list(table0)
rhandsontable(table0[[1]])
rhandsontable(table0[[1]]) %>% hot_table()
rhandsontable(table0[[1]]) %>%
hot_col("chart", renderer = htmlwidgets::JS("renderSparkline"))
rhandsontable(table0[[1]]) %>%
hot_col("oil", renderer = htmlwidgets::JS("renderSparkline"))
rhandsontable(table0[[1]]) %>%
hot_context_menu(allowRowEdit = FALSE, allowColEdit = FALSE)
rhandsontable(table0[[1]]) %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}"))))
rhandsontable(table0[[1]]) %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}")),
search = list(name = "Search",
callback = htmlwidgets::JS(
"function (key, options) {
var srch = prompt('Search criteria');
this.search.query(srch);
this.render();
}"))))
rhandsontable(table0[[1]]) %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}")),
search = list(name = "Search",
callback = htmlwidgets::JS(
"function (key, options) {
var srch = prompt('Search criteria');
this.search.query(srch);
this.render();
}")))) %>%
%>%
rhandsontable(table0[[1]]) %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}")),
search = list(name = "Search",
callback = htmlwidgets::JS(
"function (key, options) {
var srch = prompt('Search criteria');
this.search.query(srch);
this.render();
}")))) %>%
hot_cols(renderer = "
function (instance, td, row, col, prop, value, cellProperties) {
Handsontable.renderers.NumericRenderer.apply(this, arguments);
if (row == col) {
td.style.background = 'lightgrey';
} else if (col > row) {
td.style.background = 'grey';
td.style.color = 'grey';
} else if (value < -0.75) {
td.style.background = 'pink';
} else if (value > 0.75) {
td.style.background = 'lightgreen';
}
}")
rhandsontable(table0[[1]]) %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}")),
search = list(name = "Search",
callback = htmlwidgets::JS(
"function (key, options) {
var srch = prompt('Search criteria');
this.search.query(srch);
this.render();
}"))))%>%
hot_cols(columnSorting = TRUE)
rhandsontable(table0[[1]]) %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}")),
search = list(name = "Search",
callback = htmlwidgets::JS(
"function (key, options) {
var srch = prompt('Search criteria');
this.search.query(srch);
this.render();
}"))))%>%
hot_cols(columnSorting = TRUE)%>%
hot_table(highlightCol = TRUE, highlightRow = TRUE)
rhandsontable(table0[[1]], stretchH = "all") %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}")),
search = list(name = "Search",
callback = htmlwidgets::JS(
"function (key, options) {
var srch = prompt('Search criteria');
this.search.query(srch);
this.render();
}"))))%>%
hot_cols(columnSorting = TRUE)%>%
hot_table(highlightCol = TRUE, highlightRow = TRUE)
rhandsontable(table0[[1]], comments = NULL,stretchH = "all") %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}")),
search = list(name = "Search",
callback = htmlwidgets::JS(
"function (key, options) {
var srch = prompt('Search criteria');
this.search.query(srch);
this.render();
}"))))%>%
hot_cols(columnSorting = TRUE)%>%
hot_table(highlightCol = TRUE, highlightRow = TRUE)
rhandsontable(table0[[1]], stretchH = "all") %>%
hot_context_menu(
customOpts = list(
csv = list(name = "Download to CSV",
callback = htmlwidgets::JS(
"function (key, options) {
var csv = csvString(this, sep=',', dec='.');
var link = document.createElement('a');
link.setAttribute('href', 'data:text/plain;charset=utf-8,' +
encodeURIComponent(csv));
link.setAttribute('download', 'data.csv');
document.body.appendChild(link);
link.click();
document.body.removeChild(link);
}")),
search = list(name = "Search",
callback = htmlwidgets::JS(
"function (key, options) {
var srch = prompt('Search criteria');
this.search.query(srch);
this.render();
}"))))%>%
hot_cols(columnSorting = TRUE)%>%
hot_table(highlightCol = TRUE, highlightRow = TRUE)%>%
hot_heatmap()
ggpair
# Shiny - Приложение. Визуализация работы всего кода
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
# 1. Место хранения файлов            ####
path <- "1.Data/view_in_shiny_like_files"
vec_of_files <- list.files(path = path)
data <- tar_read(model_data)$model_data
list_axis_cor <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "model", "err"))] # Определение названий осей по колонкам
# 2. Преобразование данных            ####
# Преобразование
alko_vec <- 'Algorithm 1'
visual_layout_processing <- list(
selectizeInput('alko', label = 'Algorythm', choices = alko_vec, options = list(create = TRUE), selected = "algorithm 1"),
sliderInput('market_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = ''),
actionButton("update_data", "Update data", style = "color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# Графики
# box 1
list_box1_processing <- c("methanol", 'model')
visual_layout_graphic1_processing <- list(
selectizeInput('proc_list1', label = 'Curve data', choices = list_box1_processing, options = list(create = TRUE), selected = list_box1_processing, multiple = TRUE),
plotlyOutput('proc_graph1') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# box 2
list_box2_processing <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "err"))] # Определение названий осей по колонкам
visual_layout_graphic2_processing <- list(
selectizeInput('proc_list2', label = 'Curve data', choices = list_box2_processing, options = list(create = TRUE), selected = c('gas', 'gdp'), multiple = TRUE),
plotlyOutput('proc_graph2') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# 3. Раздел меню с общими настройками ####
visual_layout_loading <- list(
fileInput("user_file", "Send File", accept = ".csv"),
selectizeInput("from_where", label = "Choose input", choices = c("File","Downloaded"),options = list(create = TRUE), selected = "File"),
uiOutput("id2")
# actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
# actionButton("update_data", "Update data", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 4. Раздел меню с графиками          ####
# Попарные корреляции
visual_layout_corr <- list(
menuItem("First correlation graphic",selectizeInput("Y_1", label = "Choose Y axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_1", label = "Choose X axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('first_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')),
menuItem("Second correlation graphic", selectizeInput("Y_2", label = "Choose Y axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_2", label = "Choose X axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('second_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
)
# Кривая и гистограмма
visual_layout_model <- list(
sliderInput('model_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
# Общий
visual_layout_graphic <- list(
menuItem('Correlation graphic', visual_layout_corr),
menuItem('Model graphic', visual_layout_model),
textInput("email_pol", "Write email for reporting", "n.burakov@dtwin.ru"),
actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 5. Загрузка                         ####
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
