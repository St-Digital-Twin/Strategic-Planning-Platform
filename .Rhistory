.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"] %>%
dcast(... ~ m)
VA_data
temp
temp <- read.xlsx("1.Data/tempdata.xlsx")
temp
VA_data
modelCreation
list_box1_processing
View(VA_data)
alko_vec <- 'Algorithm 2'
temp
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"]
VA_data
VA_data
VA_data[m == "Algorithm 2"]$value
modelCreation <- read.xlsx("1.Data/tempdata.xlsx")
modelCreation$model <- VA_data[m == "Algorithm 2"]$value
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
VA_data[m == input$alko]$value
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
VA_data
modelCreation
temp
VA_data %>% dcast(...~m)
temp$model
temp[,c("model")]
cbind(VA_data %>% dcast(...~m),temp$model)
cbind(VA_data %>% dcast(...~m),temp$model) %>% setnames("V2","Algorithm 1"))
cbind(VA_data %>% dcast(...~m),temp$model) %>% setnames("V2","Algorithm 1")
new_data <- cbind(VA_data %>% dcast(...~m),temp$model) %>% setnames("V2","Algorithm 1")
new_data
data <- copy(new_data) %>%
.[,-c("model")]
data
new_data <- cbind(VA_data %>% dcast(...~m),temp$model) %>% setnames("V2","Algorithm 1")
data <- copy(temp) %>%
.[,-c("model")]
data
data <- copy(temp) %>%
.[,-c("model")]
temp
data <- copy(temp) %>%
as.data.table() %>%
.[,-c("model")]
data
data <- temp %>%
as.data.table() %>%
.[,-c("model")] %>%
cbind(new_data)
data
data <- temp %>%
as.data.table() %>%
.[,-c("model")] %>%
cbind(new_data %>% .[,-c("fact ")]) %>%
melt(measure.vars = c("Algorithm 2", "Algorithm 3","Algorithm 4","Algorithm 1"))
data <- temp %>%
as.data.table() %>%
.[,-c("model")] %>%
cbind(new_data %>% .[,-c("fact")]) %>%
melt(measure.vars = c("Algorithm 2", "Algorithm 3","Algorithm 4","Algorithm 1"))
data
data <- temp %>%
as.data.table() %>%
.[,-c("model")] %>%
cbind(new_data %>% .[,-c("fact","x")]) %>%
melt(measure.vars = c("Algorithm 2", "Algorithm 3","Algorithm 4","Algorithm 1"))
data
new_data
data <- temp %>%
as.data.table() %>%
.[,-c("model")] %>%
cbind(new_data %>% .[,-c("fact","x")])
data
data
vec_indic = c('model', 'methanol', 'oil',"Algorithm 2","Algorithm 3")
vec_indic
vec_indic = c('model', 'methanol', "Algorithm 2","Algorithm 3")
vec_indic = c("Algorithm 1",'methanol', "Algorithm 2","Algorithm 3")
data
vec_indic
vec_indic
# 8. Графики рыночных акций                                 ####
marketDataGraph <- function(vec_indic = c('coal', 'gas', 'oil'),
str_year = 2012,
end_year = 2020,
data = tar_read(model_data)$model_data, # '1.Data/model_data.xlsx'
targets  = TRUE){
if(!targets){
data <- read.xlsx(xlsxFile = data) %>% as.data.table()
}
if(str_year < min(data$year)){
str_year <- min(data$year)
}
if(end_year > max(data$year)){
end_year <- max(data$year)
}
# Подготовка данных для кривых
data0 <- copy(data) %>%
.[, rowid := 1:nrow(.)] %>%
.[, c('year', 'rowid', vec_indic), with = FALSE] %>%
.[year %between% c(str_year, end_year), ] %>%
melt(measure = vec_indic, variable.name = "type", value.name = 'price')
#na.omit(., cols = 'methanol')
# Кривая
ggplotly(ggplot(data0, aes(x = rowid, y = price, color = type)) +
geom_line() +
# scale_colour_manual(values = c('#FDC600','#637672')) +
scale_x_continuous(name = 'year', breaks = seq(first(data0$rowid), last(data0$rowid), by = 12), label = seq(first(data0$year), last(data0$year), by = 1)) +
theme (
#text = element_text(family = "Panton"),
panel.grid.major.x = element_line(colour = "white", linetype = "dotted"),
panel.grid.major.y = element_line(colour = "white", linetype = "dotted"),
#legend.text.align = 0.001,
text              = element_text (family = "Panton",
color  = "white"),
rect              = element_rect (fill   = "black"),
line              = element_line (color  = "black"),
title             = element_text (size   = 15,
face   = "bold"),
legend.title      = element_text (size  = 12,
color = "white",
face  = "bold"),
legend.key        = element_rect (fill  = "black"),
legend.background = element_rect (fill  = "black"),
legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16),
axis.title.y      = element_text (size  = 16),
axis.text         = element_text (size  = 12,
color = "white"),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
)
) %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(legend = list(
orientation = "h",y = -0.25,
bgcolor  = 'rgb(0, 46, 69)'))  %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
}
vec_indic
vec_indic
str_year = 2012
end_year = 2025
targets  = FALSE
copy(data) %>%
.[, rowid := 1:nrow(.)]
# Подготовка данных для кривых
data0 <- copy(data) %>%
.[, rowid := 1:nrow(.)] %>%
.[, c('year', 'rowid', vec_indic), with = FALSE] %>%
.[year %between% c(str_year, end_year), ] %>%
melt(measure = vec_indic, variable.name = "type", value.name = 'price')
data0
# Кривая
ggplotly(ggplot(data0, aes(x = rowid, y = price, color = type)) +
geom_line() +
# scale_colour_manual(values = c('#FDC600','#637672')) +
scale_x_continuous(name = 'year', breaks = seq(first(data0$rowid), last(data0$rowid), by = 12), label = seq(first(data0$year), last(data0$year), by = 1)) +
theme (
#text = element_text(family = "Panton"),
panel.grid.major.x = element_line(colour = "white", linetype = "dotted"),
panel.grid.major.y = element_line(colour = "white", linetype = "dotted"),
#legend.text.align = 0.001,
text              = element_text (family = "Panton",
color  = "white"),
rect              = element_rect (fill   = "black"),
line              = element_line (color  = "black"),
title             = element_text (size   = 15,
face   = "bold"),
legend.title      = element_text (size  = 12,
color = "white",
face  = "bold"),
legend.key        = element_rect (fill  = "black"),
legend.background = element_rect (fill  = "black"),
legend.text       = element_text (size  = 12,
color = "white",
face  = "bold"),
panel.background  = element_rect (fill = "black"),
panel.grid        = element_blank(),
axis.title.x      = element_text (size  = 16),
axis.title.y      = element_text (size  = 16),
axis.text         = element_text (size  = 12,
color = "white"),
plot.caption      = element_text (size  = 8,
face  = "italic",
color = "white")
)
) %>%
layout(plot_bgcolor = 'rgb(0, 46, 69)') %>%
layout(paper_bgcolor = 'rgb(0, 46, 69)') %>%
layout(font = t) %>%
layout(legend = list(
orientation = "h",y = -0.25,
bgcolor  = 'rgb(0, 46, 69)'))  %>%
layout(xaxis = list(gridcolor = 'rgb(150, 150, 150)'),
yaxis = list(gridcolor = 'rgb(150, 150, 150)'))
VA_data
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
VA_data
bind(VA_data, modelCreation$model) %>% setnames("V2","Algorithm 1")
cbind(VA_data, modelCreation$model) %>% setnames("V2","Algorithm 1")
cbind(VA_data, modelCreation$model) %>% setnames("V2","Algorithm 1")
new_data
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
VA_data
VA_data
VA_data %>% dcast(... ~ m)
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"]
VA_data %>% dcast(... ~ m)
VA_data %>% dcast(... ~ m)
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
library(qs)
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
VA_data
VA_data %>% dcast(... ~ m)
VA_data
VA_data %>% dcast(... ~ m)
VA_data %>% dcast(...~ m)
VA_data %>% dcast(...~m)
VA_data %>% data.table::dcast(... ~ m)
VA_data %>% dcast(... ~ m)
modelCreation$model
VA_data %>% dcast(... ~ m)
VA_data %>% dcast(... ~ m)
VA_data %>% dcast(... ~ m)
VA_data %>% dcast(... ~ m)
VA_data %>% dcast(... ~ m)
VA_data %>% dcast(... ~ m)
VA_data %>% dcast(... ~ m)
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"]
VA_data %>% dcast(... ~ m)
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"] %>% dcast(... ~ m)
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"] %>% dcast(... ~ m)
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"] %>% dcast(... ~ m)
qread(VA_data,"modelVA")
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"] %>% dcast(... ~ m)
VA_data
qread(VA_data,"modelVA")
data
temp
modelCreation$model
qread("modelVA")
qread("modelVA") %>%
as.data.table()
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"] %>% dcast(... ~ m) %>%.[,-c("fact","x")]
VA_data
VA_data <- qread("modelVA") %>%
as.data.table() %>%
.[m == "model", m := "Algorithm 2"] %>%
.[m == "model2", m := "Algorithm 3"] %>%
.[m == "model3", m := "Algorithm 4"] %>% dcast(... ~ m)
qsave(VA_data,"modelVA")
VA_data <- qread("modelVA")
VA_data
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
cbind(VA_data, modelCreation$model) %>% setnames("V2","Algorithm 1")
new_data
modelCreation
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
data
data = "1.Data/tempdata.xlsx"
read.xlsx(xlsxFile = data)
read.xlsx(xlsxFile = data,sep.names = " ")
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/seafiles.dtwin.ru/121.EurochemP')
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
<<<<<<< HEAD
knit2html("1.Data/testrmd.Rmd", options = "")
knit2html("1.Data/testrmd.Rmd", options = "")
knit2html("1.Data/testrmd.Rmd", options = "")
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
getwd()
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
# 1. Место хранения файлов            ####
path <- "1.Data/view_in_shiny_like_files"
vec_of_files <- list.files(path = path)
data <- tar_read(model_data)$model_data
=======
>>>>>>> 52f7bd578a9cf665dfa3ce14ea69420422c2b3ed
# Shiny - Приложение. Визуализация работы всего кода
# setwd('/mnt/seafiles.dtwin.ru/Strategic-Planning-Platform')
library(qs)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
setwd('/mnt/seafiles.dtwin.ru/Strategic-Planning-Platform')
library(qs)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
setwd('/mnt/seafiles.dtwin.ru/Strategic-Planning-Platform')
# Shiny - Приложение. Визуализация работы всего кода
setwd("~/")
setwd('/mnt/seafiles.dtwin.ru/Strategic-Planning-Platform')
setwd('~/mnt/seafiles.dtwin.ru/Strategic-Planning-Platform')
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/github/Strategic-Planning-Platform')
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/github/Strategic-Planning-Platform')
library(qs)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
includeCSS("www/CSS.css")
getwd()
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/github/Strategic-Planning-Platform')
library(qs)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
library(qs)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
library(qs)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny                            ####
shinyApp(ui, server)
# Shiny - Приложение. Визуализация работы всего кода
setwd('/mnt/data-external/Strategic-Planning-Platform')
library(qs)
source('5.R/2.EuroChemFunc.R', encoding = 'UTF-8')
source('5.R/3.UIFunc.R', encoding = 'UTF-8')
