sliderInput('market_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = ''),
actionButton("update_data", "Update data", style = "color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# Графики
# box 1
list_box1_processing <- c("methanol", 'model')
visual_layout_graphic1_processing <- list(
selectizeInput('proc_list1', label = 'Curve data', choices = list_box1_processing, options = list(create = TRUE), selected = list_box1_processing, multiple = TRUE),
plotlyOutput('proc_graph1') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# box 2
list_box2_processing <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "err"))] # Определение названий осей по колонкам
visual_layout_graphic2_processing <- list(
selectizeInput('proc_list2', label = 'Curve data', choices = list_box2_processing, options = list(create = TRUE), selected = c('gas', 'gdp'), multiple = TRUE),
plotlyOutput('proc_graph2') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# 3. Раздел меню с общими настройками ####
visual_layout_loading <- list(
fileInput("user_file", "Send File", accept = ".csv"),
selectizeInput("from_where", label = "Choose input", choices = c("File","Downloaded"),options = list(create = TRUE), selected = "File"),
uiOutput("id2")
# actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
# actionButton("update_data", "Update data", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 4. Раздел меню с графиками ####
# Попарные корреляции
visual_layout_corr <- list(
menuItem("First correlation graphic",selectizeInput("Y_1", label = "Choose Y axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_1", label = "Choose X axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('first_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')),
menuItem("Second correlation graphic", selectizeInput("Y_2", label = "Choose Y axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_2", label = "Choose X axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('second_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
)
# Кривая и гистограмма
visual_layout_model <- list(
sliderInput('model_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
# Общий
visual_layout_graphic <- list(
menuItem('Correlation graphic', visual_layout_corr),
menuItem('Model graphic', visual_layout_model),
textInput("email_pol", "Write email for reporting", "n.burakov@dtwin.ru"),
actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 5. Загрузка ####
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny ####
shinyApp(ui, server)
# 2. Преобразование данных ####
# Преобразование
alko_vec <- 'Algorithm 1'
visual_layout_processing <- list(
selectizeInput('alko', label = 'Algorythm', choices = alko_vec, options = list(create = TRUE), selected = "algorithm 1"),
sliderInput('market_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = ''),
actionButton("update_data", "Update data", style = "color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# Графики
# box 1
list_box1_processing <- c("methanol", 'model')
visual_layout_graphic1_processing <- list(
selectizeInput('proc_list1', label = 'Curve data', choices = list_box1_processing, options = list(create = TRUE), selected = list_box1_processing, multiple = TRUE),
plotlyOutput('proc_graph1') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# box 2
list_box2_processing <- names(data)[which(names(data) %!in% c('year', 'month', 'gdp_less_1', "err"))] # Определение названий осей по колонкам
visual_layout_graphic2_processing <- list(
selectizeInput('proc_list2', label = 'Curve data', choices = list_box2_processing, options = list(create = TRUE), selected = c('gas', 'gdp'), multiple = TRUE),
plotlyOutput('proc_graph2') %>% withSpinner(type = getOption("spinner.type", default = 6),color = "#FDC600")
)
# 3. Раздел меню с общими настройками ####
visual_layout_loading <- list(
fileInput("user_file", "Send File", accept = ".csv"),
selectizeInput("from_where", label = "Choose input", choices = c("File","Downloaded"),options = list(create = TRUE), selected = "File"),
uiOutput("id2")
# actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
# actionButton("update_data", "Update data", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 4. Раздел меню с графиками ####
# Попарные корреляции
visual_layout_corr <- list(
menuItem("First correlation graphic",selectizeInput("Y_1", label = "Choose Y axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_1", label = "Choose X axis for first graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('first_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')),
menuItem("Second correlation graphic", selectizeInput("Y_2", label = "Choose Y axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'euro'),
selectizeInput("X_2", label = "Choose X axis for second graph", choices = list_axis_cor, options = list(create = TRUE), selected = 'oil'),
sliderInput('second_graph_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
)
# Кривая и гистограмма
visual_layout_model <- list(
sliderInput('model_year', 'Year', min = min(data$year), max = max(data$year), value = c(2012, 2020), sep = '')
)
# Общий
visual_layout_graphic <- list(
menuItem('Correlation graphic', visual_layout_corr),
menuItem('Model graphic', visual_layout_model),
textInput("email_pol", "Write email for reporting", "n.burakov@dtwin.ru"),
actionButton("send_email", "Send Report", style="color: #001F3F; background-color: #FDC600; border-color: #FDC600")
)
# 5. Загрузка ####
source('3.Shiny/121.EurochemP/visnetwork_fun.R', encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/server.R',         encoding = 'UTF-8')
source('3.Shiny/121.EurochemP/ui.R',             encoding = 'UTF-8')
# 6. Shiny ####
shinyApp(ui, server)
# Инициация ####
setwd("/Users/sgum/Yandex.Disk-work.drive@dtwin.ru.localized/1. PersData/1. ИП Гумеров/7. СП/4. ЦД  UP/2. Проекты/121.EurochemP/")
path <- "8.VA/JavaClasses/StatModel/classes"
library(rJava)
library(ggplot2)
library(tidyverse)
library(plotly)
.jinit()
.jclassPath()
.jaddClassPath(path)
.jclassPath()
stat.model <- .jnew("statmodel.StatModel")
str(stat.model)
.jconstructors(stat.model)
.jmethods(stat.model)
.jfields(stat.model)
.DollarNames(stat.model)
brent   <-read.table("8.VA/1.Data/brent.txt", header = FALSE, sep = " ")
coal    <-read.csv("8.VA/1.Data/coal.txt", header = FALSE)
gas     <-read.csv("8.VA/1.Data/gas.txt", header = FALSE, sep = " ")
euro    <-read.csv("8.VA/1.Data/euro.txt", header = FALSE, sep = " ")
GDP     <-read.csv("8.VA/1.Data/GDP.txt", header = FALSE, sep = " ") # Накопленным итогом
methanol<-read.csv("8.VA/1.Data/methanol.txt", header = FALSE, sep = " ")
# Вариант 1: МГК. Линейная регресионная модель ####
m <- 96 # Количество временных фактических периодов, в месяцах 8 лет. С 2012-2019
n <- 5  # Количество влияющих факторов (нефть, ...)
unit <- 1 #  Если 1 то добавляем константу в модель целевого показателя
test <- GDP %>% cbind(V2 = seq(1, 3 * m)) %>% as_tibble()
k <- ggplot(test, aes(y = V1, x = V2)) +
geom_line()
ggplotly(k)
stat.model$InitModel(as.integer(m), as.integer(n), as.integer(unit)) # Инициация модели
stat.model$FillX(as.integer(1), brent[1:m, 1]) # Заполняем модель фактическими значениями влияющих факторов
stat.model$FillX(as.integer(2), coal[1:m, 1])
stat.model$FillX(as.integer(3), gas[1:m, 1])
stat.model$FillX(as.integer(4), euro[1:m, 1])
stat.model$FillX(as.integer(5), GDP[1:m, 1])
stat.model$FillY(methanol[1:m, 1])
R2 <- stat.model$CalcModel() # Создаем модель
t <- c(1:m)
f <- methanol[1:m, 1]
fCalc <- stat.model$GetCalc() # Получаем модельные значения ретроспективных значений
plot(t, f, type = "l")
lines(t, fCalc, col = "blue")
# Вариант 1: МГК. Линейная регресионная модель ####
m <- 96 # Количество временных фактических периодов, в месяцах 8 лет. С 2012-2019
n <- 5  # Количество влияющих факторов (нефть, ...)
unit <- 1 #  Если 1 то добавляем константу в модель целевого показателя
{test <- GDP %>% cbind(V2 = seq(1, 3 * m)) %>% as_tibble()
k <- ggplot(test, aes(y = V1, x = V2)) +
geom_line()
ggplotly(k)
}
stat.model$InitModel(as.integer(m), as.integer(n), as.integer(unit)) # Инициация модели
stat.model$FillX(as.integer(1), brent[1:m, 1]) # Заполняем модель фактическими значениями влияющих факторов
stat.model$FillX(as.integer(2), coal[1:m, 1])
stat.model$FillX(as.integer(3), gas[1:m, 1])
stat.model$FillX(as.integer(4), euro[1:m, 1])
stat.model$FillX(as.integer(5), GDP[1:m, 1])
stat.model$FillY(methanol[1:m, 1])
R2 <- stat.model$CalcModel() # Создаем модель
t <- c(1:m)
f <- methanol[1:m, 1]
fCalc <- stat.model$GetCalc() # Получаем модельные значения ретроспективных значений
plot(t, f, type = "l")
lines(t, fCalc, col = "blue")
# Строим прогнозы предикторов
mPred  <- length(brent[, 1])    # Количество известных-прогнозных значений по бренту и пр.
mKnown <- length(methanol[, 1]) # Количество известных значений по метанолу
stat.model$InitPredictor(as.integer(mPred), as.integer(mKnown))
stat.model$PredX(as.integer(1), brent[1:mPred, 1])
stat.model$PredX(as.integer(2), coal[1:mPred, 1])
stat.model$PredX(as.integer(3), gas[1:mPred, 1])
stat.model$PredX(as.integer(4), euro[1:mPred, 1])
stat.model$PredX(as.integer(5), GDP[1:mPred, 1])
stat.model$PredY(methanol[1:mKnown, 1])
stat.model$Forward() # Строим простую регресионная модель для метанола (на прогнозный период)
yPred <- stat.model$GetPredCalc()
tp  <- c(1:mPred)
fp <- yPred
tk <- c(1:mKnown)
fk <- methanol[1:mKnown, 1]
plot(tp, fp, type = "l", col = "red")
lines(tk, fk, col = "black")
relErr <- stat.model$RelErr()
absErr <- stat.model$AbsErr()
plot(tp, fp, type = "l", col = "red")
# Инициация ####
setwd("/Users/sgum/Yandex.Disk-work.drive@dtwin.ru.localized/1. PersData/1. ИП Гумеров/7. СП/4. ЦД  UP/2. Проекты/121.EurochemP/")
path <- "8.VA/JavaClasses/StatModel/classes"
library(rJava)
library(ggplot2)
library(tidyverse)
library(plotly)
.jinit()
.jclassPath()
.jaddClassPath(path)
.jclassPath()
stat.model <- .jnew("statmodel.StatModel")
str(stat.model)
.jconstructors(stat.model)
.jmethods(stat.model)
.jfields(stat.model)
.DollarNames(stat.model)
brent   <-read.table("8.VA/1.Data/brent.txt", header = FALSE, sep = " ")
coal    <-read.csv("8.VA/1.Data/coal.txt", header = FALSE)
gas     <-read.csv("8.VA/1.Data/gas.txt", header = FALSE, sep = " ")
euro    <-read.csv("8.VA/1.Data/euro.txt", header = FALSE, sep = " ")
GDP     <-read.csv("8.VA/1.Data/GDP.txt", header = FALSE, sep = " ") # Накопленным итогом
methanol<-read.csv("8.VA/1.Data/methanol.txt", header = FALSE, sep = " ")
# Инициация ####
# setwd("/Users/sgum/Yandex.Disk-work.drive@dtwin.ru.localized/1. PersData/1. ИП Гумеров/7. СП/4. ЦД  UP/2. Проекты/121.EurochemP/")
path <- "8.VA/JavaClasses/StatModel/classes"
library(rJava)
library(ggplot2)
library(tidyverse)
library(plotly)
.jinit()
.jclassPath()
.jaddClassPath(path)
.jclassPath()
stat.model <- .jnew("statmodel.StatModel")
# Инициация ####
# setwd("/Users/sgum/Yandex.Disk-work.drive@dtwin.ru.localized/1. PersData/1. ИП Гумеров/7. СП/4. ЦД  UP/2. Проекты/121.EurochemP/")
path <- "8.VA/JavaClasses/StatModel/classes/"
.jinit()
.jclassPath()
.jaddClassPath(path)
.jclassPath()
stat.model <- .jnew("statmodel.StatModel")
path
paste0(get_wd()),path)
paste0(get_wd(),path)
paste0(getwd(),path)
# Инициация ####
# setwd("/Users/sgum/Yandex.Disk-work.drive@dtwin.ru.localized/1. PersData/1. ИП Гумеров/7. СП/4. ЦД  UP/2. Проекты/121.EurochemP/")
path <- "/8.VA/JavaClasses/StatModel/classes/"
.jclassPath()
stat.model <- .jnew("statmodel.StatModel")
getwd()
paste0(getwd(),path)
# Инициация ####
# setwd("/Users/sgum/Yandex.Disk-work.drive@dtwin.ru.localized/1. PersData/1. ИП Гумеров/7. СП/4. ЦД  UP/2. Проекты/121.EurochemP/")
path <- "/8.VA/JavaClasses/StatModel/classes"
.jinit()
.jclassPath()
.jaddClassPath(paste0(getwd(),path))
.jclassPath()
stat.model <- .jnew("statmodel.StatModel")
paste0(getwd(),path
paste0(getwd(),path)
paste0(getwd(),path)
# Инициация ####
# setwd("/Users/sgum/Yandex.Disk-work.drive@dtwin.ru.localized/1. PersData/1. ИП Гумеров/7. СП/4. ЦД  UP/2. Проекты/121.EurochemP/")
path <- "/8.VA/6.JavaClasses/StatModel/classes"
.jinit()
.jclassPath()
.jaddClassPath(paste0(getwd(),path))
.jclassPath()
stat.model <- .jnew("statmodel.StatModel")
str(stat.model)
.jconstructors(stat.model)
.jmethods(stat.model)
.jfields(stat.model)
.DollarNames(stat.model)
brent   <-read.table("8.VA/1.Data/brent.txt", header = FALSE, sep = " ")
coal    <-read.csv("8.VA/1.Data/coal.txt", header = FALSE)
gas     <-read.csv("8.VA/1.Data/gas.txt", header = FALSE, sep = " ")
euro    <-read.csv("8.VA/1.Data/euro.txt", header = FALSE, sep = " ")
GDP     <-read.csv("8.VA/1.Data/GDP.txt", header = FALSE, sep = " ") # Накопленным итогом
methanol<-read.csv("8.VA/1.Data/methanol.txt", header = FALSE, sep = " ")
# Вариант 1: МГК. Линейная регресионная модель ####
m <- 96 # Количество временных фактических периодов, в месяцах 8 лет. С 2012-2019
n <- 5  # Количество влияющих факторов (нефть, ...)
unit <- 1 #  Если 1 то добавляем константу в модель целевого показателя
{test <- GDP %>% cbind(V2 = seq(1, 3 * m)) %>% as_tibble()
k <- ggplot(test, aes(y = V1, x = V2)) +
geom_line()
ggplotly(k)
}
stat.model$InitModel(as.integer(m), as.integer(n), as.integer(unit)) # Инициация модели
stat.model$FillX(as.integer(1), brent[1:m, 1]) # Заполняем модель фактическими значениями влияющих факторов
stat.model$FillX(as.integer(2), coal[1:m, 1])
stat.model$FillX(as.integer(3), gas[1:m, 1])
stat.model$FillX(as.integer(4), euro[1:m, 1])
stat.model$FillX(as.integer(5), GDP[1:m, 1])
stat.model$FillY(methanol[1:m, 1])
R2 <- stat.model$CalcModel() # Создаем модель
t <- c(1:m)
f <- methanol[1:m, 1]
fCalc <- stat.model$GetCalc() # Получаем модельные значения ретроспективных значений
plot(t, f, type = "l")
lines(t, fCalc, col = "blue")
# Строим прогнозы предикторов
mPred  <- length(brent[, 1])    # Количество известных-прогнозных значений по бренту и пр.
fCalc
model1 <- tibble(x = t, model = fCalc, fact = f)
model1
model1 <- tibble(x = t, model = fCalc, fact = f) %>%
pivot_longer(cols = c(model, fact), names_to = m)
model1 <- tibble(x = t, model = fCalc, fact = f) %>%
pivot_longer(cols = c(model, fact), names_to = "m")
ggplot(model1, aes(x = x, y = value, color = m)) +
geom_line()
k2 <- ggplot(model1, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k2)
mPred  <- length(brent[, 1])    # Количество известных-прогнозных значений по бренту и пр.
mKnown <- length(methanol[, 1]) # Количество известных значений по метанолу
stat.model$InitPredictor(as.integer(mPred), as.integer(mKnown))
stat.model$PredX(as.integer(1), brent[1:mPred, 1])
stat.model$PredX(as.integer(2), coal[1:mPred, 1])
stat.model$PredX(as.integer(3), gas[1:mPred, 1])
stat.model$PredX(as.integer(4), euro[1:mPred, 1])
stat.model$PredX(as.integer(5), GDP[1:mPred, 1])
stat.model$PredY(methanol[1:mKnown, 1])
stat.model$Forward() # Строим простую регресионная модель для метанола (на прогнозный период)
yPred <- stat.model$GetPredCalc()
tp  <- c(1:mPred)
fp <- yPred
tk <- c(1:mKnown)
fk <- methanol[1:mKnown, 1]
plot(tp, fp, type = "l", col = "red")
lines(tk, fk, col = "black")
tp
tk
model11 <- tibble(x = tp, fact = fk, model = fp) %>%
pivot_longer(cols = c(model, fact), names_to = "m")
fk
c(fk, rep(NA, length(fp) - length(fk))
c(fk, rep(NA, length(fp) - length(fk)))
c(fk, rep(NA, length(fp) - length(fk)))
model11 <- tibble(x = tp, fact = c(fk, rep(NA, length(fp) - length(fk))), model = fp) %>%
pivot_longer(cols = c(model, fact), names_to = "m")
model11
k21 <- ggplot(model1, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k21)
tp
model21 <- tibble(x     = tp,
fact  = c(fk, rep(NA, length(fp) - length(fk))),
model = fp) %>%
pivot_longer(cols = c(model, fact), names_to = "m")
k21 <- ggplot(model1, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k21)
tp
k21 <- ggplot(model21, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k21)
# Вариант 2: МГК. Регрессия зависящая от себя  ####
m <- 96
n <- 6 # Мы берем 6 факторов
unit <- 0
stat.model$InitModel(as.integer(m), as.integer(n), as.integer(unit))
stat.model$FillX(as.integer(1), brent[1:m, 1])
stat.model$FillX(as.integer(2), coal[1:m, 1])
stat.model$FillX(as.integer(3), gas[1:m, 1])
stat.model$FillX(as.integer(4), euro[1:m, 1])
stat.model$FillX(as.integer(5), GDP[1:m, 1])
stat.model$FillX(as.integer(6), methanol[1:m, 1]) #!!!!! Добавляем 6ю колонку про метанол
stat.model$FillY(methanol[1:(m + 1), 1], as.integer(1)) # Строим зависимость цены метанола, в том числе от предыдущего значения
R2 <- stat.model$CalcModel()
t <- c(1:m)
f <- methanol[1:m, 1]
fCalc <- stat.model$GetCalc()
plot(t, f, type = "l")
lines(t, fCalc, col = "blue")
mPred  <- length(brent[, 1])
mKnown <- length(methanol[, 1])
stat.model$InitPredictor(as.integer(mPred), as.integer(mKnown)) # Добавляем прогнозы по сурьевым показателям
stat.model$PredX(as.integer(1), brent[1:mPred, 1])
stat.model$PredX(as.integer(2), coal[1:mPred, 1])
stat.model$PredX(as.integer(3), gas[1:mPred, 1])
stat.model$PredX(as.integer(4), euro[1:mPred, 1])
stat.model$PredX(as.integer(5), GDP[1:mPred, 1])
stat.model$PredY(methanol[1:mKnown, 1])
# Вариант 2.1 Строим прогноз от первого значения стоимости метанола            ####
stat.model$Feedback(as.integer(6))
yPred <- stat.model$GetPredCalc()
tp  <- c(1:mPred)
fp <- yPred
tk <- c(1:mKnown)
fk <- methanol[1:mKnown, 1]
plot(tp, fp, type = "l", col = "red")
lines(tk, fk, col = "black")
model3 <- tibble( x     = tp,
fact  = c(fk, rep(NA, length(fp) - length(fk))),
model = fp) %>%
pivot_longer(cols = c(model, fact), names_to = "m")
k3 <- ggplot(model3, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k21)
model3 <- tibble( x     = tp,
fact  = c(fk, rep(NA, length(fp) - length(fk))),
model2 = fp) %>%
pivot_longer(cols = c(model2, fact), names_to = "m")
k3 <- ggplot(model3, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k21)
ggplotly(k3)
model4 <- tibble( x     = tp,
fact  = c(fk, rep(NA, length(fp) - length(fk))),
model3 = fp) %>%
pivot_longer(cols = c(model3, fact), names_to = "m")
k4 <- ggplot(model4, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k21)
ggplotly(k4)
model21
modelall <- full_join(model4, model3, model21, by = c("x", "m"))
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k4)
modelall
model4
model3
modelall <- full_join(model4, model3 %>% filter(m != "fact"), model21 %>% filter(m != "fact"), by = c("x"))
modelall
modelall <- full_join(model4, model3 %>% filter(m != "fact"), model21 %>% filter(m != "fact"), by = c("x", "m"))
modelall
model21 %>% filter(m != "fact")
modelall <- full_join(model4, model3 %>% filter(m != "fact"), by = c("x", "m"))
modelall <- full_join(model4, model3 %>% filter(m != "fact"), by = c("x", "m")) %>%
print()
modelall <- rbid(model4, model3 %>% filter(m != "fact"), model21 %>% filter(m != "fact")) %>%
print()
modelall <- rbind(model4, model3 %>% filter(m != "fact"), model21 %>% filter(m != "fact")) %>%
print()
modelall
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
geom_line()
ggplotly(k4)
model4
model3
model3 %>% filter(m != "fact")
model21
model21 %>% filter(m != "fact")
modelall <- rbind(model4, model3 %>% filter(m != "fact"), model21 %>% filter(m != "fact")) %>%
print()
modelall <- rbind(model4, model3 %>% filter(m != "fact"), model21 %>% filter(m != "fact")) %>%
arrange(x) %>%
print()
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
geom_line()
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
geom_line(size = 1)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
geom_line(size = 0.3)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
geom_line(size = 0.1)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
geom_line(size = 0.2)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
geom_line(size = 0.3, alpha = 0.8)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
xlab("Время") +
geom_line(size = 0.3, alpha = 0.8)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
xlab("Время") +
ylab("Цены, USD") +
geom_line(size = 0.3, alpha = 0.8)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
xlab("Время") +
ylab("Цены, USD") +
theme(text = element_text(family = "Panton"))+
geom_line(size = 0.3, alpha = 0.8)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
xlab("Время") +
ylab("Цены, USD") +
theme(text = element_text(family = "Panton"))+
theme_dark()+
geom_line(size = 0.3, alpha = 0.8)
ggplotly(kall)
kall <- ggplot(modelall, aes(x = x, y = value, color = m)) +
ggtitle("Прогнозные расчеты цены метанола на разных моделях")+
xlab("Время") +
ylab("Цены, USD") +
theme(text = element_text(family = "Panton"))+
geom_line(size = 0.3, alpha = 0.8)
ggplotly(kall)
